// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for Day.
const (
	Friday    Day = "Friday"
	Monday    Day = "Monday"
	Saturday  Day = "Saturday"
	Sunday    Day = "Sunday"
	Thursday  Day = "Thursday"
	Tuesday   Day = "Tuesday"
	Wednesday Day = "Wednesday"
)

// Defines values for StartingRuleType.
const (
	Interval StartingRuleType = "Interval"
	None     StartingRuleType = "None"
	Pause    StartingRuleType = "Pause"
)

// Day defines model for Day.
type Day string

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// Detail A human-readable explanation of the error
	Detail string `json:"detail"`

	// Extensions Field which contains any additional information for the error that occurred
	Extensions *map[string]any `json:"extensions,omitempty"`

	// Title Short human-readable summary of the error
	Title string `json:"title"`
}

// InvalidTraining defines model for InvalidTraining.
type InvalidTraining struct {
	DurationMin *string               `json:"durationMin,omitempty"`
	InvalidSets *[]InvalidTrainingSet `json:"invalidSets,omitempty"`
	Sets        *string               `json:"sets,omitempty"`
}

// InvalidTrainingSet defines model for InvalidTrainingSet.
type InvalidTrainingSet struct {
	DistanceMeters *string               `json:"distanceMeters,omitempty"`
	Repeat         *string               `json:"repeat,omitempty"`
	SetOrder       *string               `json:"setOrder,omitempty"`
	StartSeconds   *string               `json:"startSeconds,omitempty"`
	StartType      *string               `json:"startType,omitempty"`
	SubSetOrder    *string               `json:"subSetOrder,omitempty"`
	SubSets        *[]InvalidTrainingSet `json:"subSets,omitempty"`
}

// NewTraining defines model for NewTraining.
type NewTraining struct {
	// DurationMin How long does the session last, in minutes
	DurationMin int              `json:"durationMin"`
	Sets        []NewTrainingSet `json:"sets"`

	// Start On what date and time does the training occur
	Start time.Time `json:"start"`

	// TotalDistance Sum of all distances in blocks in meters
	TotalDistance int `json:"totalDistance"`
}

// NewTrainingSet defines model for NewTrainingSet.
type NewTrainingSet struct {
	// Description Description of what to swim
	Description    *string `json:"description,omitempty"`
	DistanceMeters *int    `json:"distanceMeters,omitempty"`

	// Repeat How many times to repeat this set
	Repeat int `json:"repeat"`

	// SetOrder Indicates on what place in training this set is
	SetOrder *int `json:"setOrder,omitempty"`

	// StartSeconds Used by starts which require a time parameter
	StartSeconds *int             `json:"startSeconds,omitempty"`
	StartType    StartingRuleType `json:"startType"`

	// SubSetOrder Indicates on what place in parent set this set is
	SubSetOrder *int              `json:"subSetOrder,omitempty"`
	SubSets     *[]NewTrainingSet `json:"subSets,omitempty"`

	// TotalDistance Total distance in this set
	TotalDistance int `json:"totalDistance"`
}

// Pagination Pagination metadata about paginated response
type Pagination struct {
	// Page Number of page returned
	Page int `json:"page"`

	// PageSize How many items are in page
	PageSize int `json:"pageSize"`

	// Total Total count of all items
	Total int `json:"total"`
}

// Session defines model for Session.
type Session struct {
	Day Day `json:"day"`

	// DurationMin How long does the session last, in minutes
	DurationMin int                `json:"durationMin"`
	Id          openapi_types.UUID `json:"id"`

	// StartTime When does the session start during the day
	StartTime StartTime `json:"startTime"`
}

// StartingRuleType defines model for StartingRuleType.
type StartingRuleType string

// Training defines model for Training.
type Training struct {
	// DurationMin How long does the session last, in minutes
	DurationMin int                `json:"durationMin"`
	Id          openapi_types.UUID `json:"id"`
	Sets        []TrainingSet      `json:"sets"`

	// Start On what date and time does the training occur
	Start time.Time `json:"start"`

	// TotalDistance Sum of all distances in blocks in meters
	TotalDistance int `json:"totalDistance"`
}

// TrainingDetail defines model for TrainingDetail.
type TrainingDetail struct {
	// DurationMin How long does the session last, in minutes
	DurationMin int                `json:"durationMin"`
	Id          openapi_types.UUID `json:"id"`

	// Start On what date and time does the training occur
	Start time.Time `json:"start"`

	// TotalDistance Total distance in the training in meters
	TotalDistance int `json:"totalDistance"`
}

// TrainingSet defines model for TrainingSet.
type TrainingSet struct {
	// Description Description of what to swim
	Description    *string            `json:"description,omitempty"`
	DistanceMeters *int               `json:"distanceMeters,omitempty"`
	Id             openapi_types.UUID `json:"id"`

	// Repeat How many times to repeat this set
	Repeat int `json:"repeat"`

	// SetOrder Indicates on what place in training this set is
	SetOrder *int `json:"setOrder,omitempty"`

	// StartSeconds Used by starts which require a time parameter
	StartSeconds *int             `json:"startSeconds,omitempty"`
	StartType    StartingRuleType `json:"startType"`

	// SubSetOrder Indicates on what place in parent set this set is
	SubSetOrder *int           `json:"subSetOrder,omitempty"`
	SubSets     *[]TrainingSet `json:"subSets,omitempty"`

	// TotalDistance Total distance in this set
	TotalDistance int `json:"totalDistance"`
}

// InvalidSessionErrorResponse defines model for InvalidSessionErrorResponse.
type InvalidSessionErrorResponse = ErrorDetail

// InvalidTrainingErrorResponse defines model for InvalidTrainingErrorResponse.
type InvalidTrainingErrorResponse = InvalidTraining

// SessionNotFoundErrorResponse defines model for SessionNotFoundErrorResponse.
type SessionNotFoundErrorResponse = ErrorDetail

// SessionsResponse defines model for SessionsResponse.
type SessionsResponse struct {
	// Pagination Pagination metadata about paginated response
	Pagination Pagination `json:"pagination"`
	Sessions   []Session  `json:"sessions"`
}

// TrainingDetailsCurrentWeekResponse defines model for TrainingDetailsCurrentWeekResponse.
type TrainingDetailsCurrentWeekResponse struct {
	Details []TrainingDetail `json:"details"`
}

// TrainingNotFoundErrorResponse defines model for TrainingNotFoundErrorResponse.
type TrainingNotFoundErrorResponse = ErrorDetail

// CreateTrainingRequest defines model for CreateTrainingRequest.
type CreateTrainingRequest = NewTraining

// UpdateTrainingRequest defines model for UpdateTrainingRequest.
type UpdateTrainingRequest struct {
	Blocks *[]struct {
		Name *string `json:"name,omitempty"`

		// Num Number of the block, indicates on which place this block in training is supposed to be.
		Num *int `json:"num,omitempty"`

		// Repeat How many times to repeat this block
		Repeat *int `json:"repeat,omitempty"`
		Sets   *[]struct {
			Distance *int `json:"distance,omitempty"`

			// Num Number of the set, indicates on what place in block the set is supposed to be.
			Num *int `json:"num,omitempty"`

			// Repeat How many times to repeat this set
			Repeat       *int `json:"repeat,omitempty"`
			StartingRule *struct {
				// Seconds Used by rules which require a time parameter
				Seconds *int              `json:"seconds,omitempty"`
				Type    *StartingRuleType `json:"type,omitempty"`
			} `json:"startingRule,omitempty"`

			// What Description of what to swim
			What *string `json:"what,omitempty"`
		} `json:"sets,omitempty"`
	} `json:"blocks,omitempty"`

	// Date On what date does the training occur.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DurationMin How long does the session last, in minutes
	DurationMin *int `json:"durationMin,omitempty"`

	// StartTime When does the training start during the day.
	StartTime *string `json:"startTime,omitempty"`
}

// GetSessionsParams defines parameters for GetSessions.
type GetSessionsParams struct {
	// Page Which page to return, starts at 0
	Page int `form:"page" json:"page"`

	// PageSize How many details to return
	PageSize int `form:"pageSize" json:"pageSize"`
}

// CreateSessionJSONBody defines parameters for CreateSession.
type CreateSessionJSONBody struct {
	Day Day `json:"day"`

	// DurationMin How long does the session last, in minutes
	DurationMin int `json:"durationMin"`

	// StartTime When does the session start during the day
	StartTime StartTime `json:"startTime"`
}

// UpdateSessionJSONBody defines parameters for UpdateSession.
type UpdateSessionJSONBody struct {
	Day *Day `json:"day,omitempty"`

	// DurationMin How long does the session last, in minutes
	DurationMin *int `json:"durationMin,omitempty"`

	// StartTime When does the session start during the day
	StartTime *StartTime `json:"startTime,omitempty"`
}

// GetTrainingsDetailsParams defines parameters for GetTrainingsDetails.
type GetTrainingsDetailsParams struct {
	// Page Which page to return, starts at 0
	Page int `form:"page" json:"page"`

	// PageSize How many details to return
	PageSize int `form:"pageSize" json:"pageSize"`
}

// UpdateTrainingJSONBody defines parameters for UpdateTraining.
type UpdateTrainingJSONBody struct {
	Blocks *[]struct {
		Name *string `json:"name,omitempty"`

		// Num Number of the block, indicates on which place this block in training is supposed to be.
		Num *int `json:"num,omitempty"`

		// Repeat How many times to repeat this block
		Repeat *int `json:"repeat,omitempty"`
		Sets   *[]struct {
			Distance *int `json:"distance,omitempty"`

			// Num Number of the set, indicates on what place in block the set is supposed to be.
			Num *int `json:"num,omitempty"`

			// Repeat How many times to repeat this set
			Repeat       *int `json:"repeat,omitempty"`
			StartingRule *struct {
				// Seconds Used by rules which require a time parameter
				Seconds *int              `json:"seconds,omitempty"`
				Type    *StartingRuleType `json:"type,omitempty"`
			} `json:"startingRule,omitempty"`

			// What Description of what to swim
			What *string `json:"what,omitempty"`
		} `json:"sets,omitempty"`
	} `json:"blocks,omitempty"`

	// Date On what date does the training occur.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DurationMin How long does the session last, in minutes
	DurationMin *int `json:"durationMin,omitempty"`

	// StartTime When does the training start during the day.
	StartTime *string `json:"startTime,omitempty"`
}

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody CreateSessionJSONBody

// UpdateSessionJSONRequestBody defines body for UpdateSession for application/json ContentType.
type UpdateSessionJSONRequestBody UpdateSessionJSONBody

// CreateTrainingJSONRequestBody defines body for CreateTraining for application/json ContentType.
type CreateTrainingJSONRequestBody = NewTraining

// UpdateTrainingJSONRequestBody defines body for UpdateTraining for application/json ContentType.
type UpdateTrainingJSONRequestBody UpdateTrainingJSONBody
