// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi
//lint:file-ignore ST1005 generated code

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sessions)
	GetSessions(w http.ResponseWriter, r *http.Request, params GetSessionsParams)

	// (POST /sessions)
	CreateSession(w http.ResponseWriter, r *http.Request)

	// (DELETE /sessions/{id})
	DeleteSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /sessions/{id})
	UpdateSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /trainings)
	CreateTraining(w http.ResponseWriter, r *http.Request)

	// (GET /trainings/details)
	GetTrainingsDetails(w http.ResponseWriter, r *http.Request, params GetTrainingsDetailsParams)

	// (GET /trainings/details/current-week)
	GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request)

	// (DELETE /trainings/{id})
	DeleteTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /trainings/{id})
	GetTrainingById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /trainings/{id})
	UpdateTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSessions operation middleware
func (siw *ServerInterfaceWrapper) GetSessions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSessionsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSessions(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTraining operation middleware
func (siw *ServerInterfaceWrapper) CreateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTraining(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetails operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrainingsDetailsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetailsCurrentWeek operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetailsCurrentWeek(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTraining operation middleware
func (siw *ServerInterfaceWrapper) DeleteTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingById operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingById(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTraining operation middleware
func (siw *ServerInterfaceWrapper) UpdateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sessions", wrapper.GetSessions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sessions", wrapper.CreateSession)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sessions/{id}", wrapper.DeleteSession)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/sessions/{id}", wrapper.UpdateSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trainings", wrapper.CreateTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details", wrapper.GetTrainingsDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details/current-week", wrapper.GetTrainingsDetailsCurrentWeek)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/trainings/{id}", wrapper.DeleteTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/{id}", wrapper.GetTrainingById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/trainings/{id}", wrapper.UpdateTraining)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"MvJAAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
