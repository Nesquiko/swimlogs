// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi
//lint:file-ignore ST1005 generated code

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sessions)
	GetAllSessions(w http.ResponseWriter, r *http.Request)

	// (POST /sessions)
	CreateSession(w http.ResponseWriter, r *http.Request)

	// (DELETE /sessions/{id})
	DeleteSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /sessions/{id})
	UpdateSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /trainings)
	CreateTraining(w http.ResponseWriter, r *http.Request)

	// (GET /trainings/details)
	GetTrainingsDetails(w http.ResponseWriter, r *http.Request, params GetTrainingsDetailsParams)

	// (GET /trainings/details/current-week)
	GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request)

	// (DELETE /trainings/{id})
	DeleteTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /trainings/{id})
	GetTrainingById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /trainings/{id})
	UpdateTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllSessions operation middleware
func (siw *ServerInterfaceWrapper) GetAllSessions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllSessions(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTraining operation middleware
func (siw *ServerInterfaceWrapper) CreateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTraining(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetails operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrainingsDetailsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetailsCurrentWeek operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetailsCurrentWeek(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTraining operation middleware
func (siw *ServerInterfaceWrapper) DeleteTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingById operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingById(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTraining operation middleware
func (siw *ServerInterfaceWrapper) UpdateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sessions", wrapper.GetAllSessions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sessions", wrapper.CreateSession)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sessions/{id}", wrapper.DeleteSession)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/sessions/{id}", wrapper.UpdateSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trainings", wrapper.CreateTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details", wrapper.GetTrainingsDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details/current-week", wrapper.GetTrainingsDetailsCurrentWeek)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/trainings/{id}", wrapper.DeleteTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/{id}", wrapper.GetTrainingById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/trainings/{id}", wrapper.UpdateTraining)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"EWz/WKlCAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
