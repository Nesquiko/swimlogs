// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi
//lint:file-ignore ST1005 generated code

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sessions)
	GetSessions(w http.ResponseWriter, r *http.Request, params GetSessionsParams)

	// (POST /sessions)
	CreateSession(w http.ResponseWriter, r *http.Request)

	// (DELETE /sessions/{id})
	DeleteSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /sessions/{id})
	UpdateSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /trainings)
	CreateTraining(w http.ResponseWriter, r *http.Request)

	// (GET /trainings/details)
	GetTrainingsDetails(w http.ResponseWriter, r *http.Request, params GetTrainingsDetailsParams)

	// (GET /trainings/details/current-week)
	GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request)

	// (DELETE /trainings/{id})
	DeleteTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /trainings/{id})
	GetTrainingById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /trainings/{id})
	UpdateTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSessions operation middleware
func (siw *ServerInterfaceWrapper) GetSessions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSessionsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSessions(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTraining operation middleware
func (siw *ServerInterfaceWrapper) CreateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTraining(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetails operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrainingsDetailsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetailsCurrentWeek operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetailsCurrentWeek(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTraining operation middleware
func (siw *ServerInterfaceWrapper) DeleteTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingById operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingById(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTraining operation middleware
func (siw *ServerInterfaceWrapper) UpdateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sessions", wrapper.GetSessions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sessions", wrapper.CreateSession)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sessions/{id}", wrapper.DeleteSession)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/sessions/{id}", wrapper.UpdateSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trainings", wrapper.CreateTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details", wrapper.GetTrainingsDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details/current-week", wrapper.GetTrainingsDetailsCurrentWeek)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/trainings/{id}", wrapper.DeleteTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/{id}", wrapper.GetTrainingById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/trainings/{id}", wrapper.UpdateTraining)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ru60+hqmqbHqR42pzzf/CQAA//8WJb5DjkIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
