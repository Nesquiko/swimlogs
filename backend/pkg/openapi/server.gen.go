// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi
//lint:file-ignore ST1005 generated code

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sessions)
	GetSessions(w http.ResponseWriter, r *http.Request, params GetSessionsParams)

	// (POST /sessions)
	CreateSession(w http.ResponseWriter, r *http.Request)

	// (DELETE /sessions/{id})
	DeleteSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /sessions/{id})
	UpdateSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /trainings)
	CreateTraining(w http.ResponseWriter, r *http.Request)

	// (GET /trainings/details)
	GetTrainingsDetails(w http.ResponseWriter, r *http.Request, params GetTrainingsDetailsParams)

	// (GET /trainings/details/current-week)
	GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request)

	// (DELETE /trainings/{id})
	DeleteTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /trainings/{id})
	GetTrainingById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /trainings/{id})
	UpdateTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSessions operation middleware
func (siw *ServerInterfaceWrapper) GetSessions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSessionsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSessions(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTraining operation middleware
func (siw *ServerInterfaceWrapper) CreateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTraining(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetails operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrainingsDetailsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetailsCurrentWeek operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetailsCurrentWeek(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTraining operation middleware
func (siw *ServerInterfaceWrapper) DeleteTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingById operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingById(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTraining operation middleware
func (siw *ServerInterfaceWrapper) UpdateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sessions", wrapper.GetSessions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sessions", wrapper.CreateSession)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sessions/{id}", wrapper.DeleteSession)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/sessions/{id}", wrapper.UpdateSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trainings", wrapper.CreateTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details", wrapper.GetTrainingsDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details/current-week", wrapper.GetTrainingsDetailsCurrentWeek)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/trainings/{id}", wrapper.DeleteTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/{id}", wrapper.GetTrainingById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/trainings/{id}", wrapper.UpdateTraining)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1Ker/wYAAP//kzZ4XTBEAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
