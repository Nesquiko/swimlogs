// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi
//lint:file-ignore ST1005 generated code

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sessions)
	GetAllSessions(w http.ResponseWriter, r *http.Request)

	// (POST /sessions)
	CreateSession(w http.ResponseWriter, r *http.Request)

	// (DELETE /sessions/{id})
	DeleteSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /sessions/{id})
	UpdateSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /trainings)
	CreateTraining(w http.ResponseWriter, r *http.Request)

	// (GET /trainings/details)
	GetTrainingsDetails(w http.ResponseWriter, r *http.Request, params GetTrainingsDetailsParams)

	// (GET /trainings/details/current-week)
	GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request)

	// (DELETE /trainings/{id})
	DeleteTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /trainings/{id})
	GetTrainingById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /trainings/{id})
	UpdateTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllSessions operation middleware
func (siw *ServerInterfaceWrapper) GetAllSessions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllSessions(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTraining operation middleware
func (siw *ServerInterfaceWrapper) CreateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTraining(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetails operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrainingsDetailsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetailsCurrentWeek operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetailsCurrentWeek(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTraining operation middleware
func (siw *ServerInterfaceWrapper) DeleteTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingById operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingById(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTraining operation middleware
func (siw *ServerInterfaceWrapper) UpdateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sessions", wrapper.GetAllSessions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sessions", wrapper.CreateSession)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sessions/{id}", wrapper.DeleteSession)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/sessions/{id}", wrapper.UpdateSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trainings", wrapper.CreateTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details", wrapper.GetTrainingsDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details/current-week", wrapper.GetTrainingsDetailsCurrentWeek)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/trainings/{id}", wrapper.DeleteTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/{id}", wrapper.GetTrainingById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/trainings/{id}", wrapper.UpdateTraining)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9Y1CU17VXzVePlv/JwAA//8TjCwfH0IAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
