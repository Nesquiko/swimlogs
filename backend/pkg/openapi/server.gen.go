// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi
//lint:file-ignore ST1005 generated code

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sessions)
	GetAllSessions(w http.ResponseWriter, r *http.Request)

	// (POST /sessions)
	CreateSession(w http.ResponseWriter, r *http.Request)

	// (DELETE /sessions/{id})
	DeleteSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /sessions/{id})
	UpdateSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /trainings)
	CreateTraining(w http.ResponseWriter, r *http.Request)

	// (GET /trainings/details)
	GetTrainingsDetails(w http.ResponseWriter, r *http.Request, params GetTrainingsDetailsParams)

	// (GET /trainings/details/current-week)
	GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request)

	// (DELETE /trainings/{id})
	DeleteTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /trainings/{id})
	GetTrainingById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /trainings/{id})
	UpdateTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllSessions operation middleware
func (siw *ServerInterfaceWrapper) GetAllSessions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllSessions(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTraining operation middleware
func (siw *ServerInterfaceWrapper) CreateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTraining(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetails operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrainingsDetailsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetailsCurrentWeek operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetailsCurrentWeek(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTraining operation middleware
func (siw *ServerInterfaceWrapper) DeleteTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingById operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingById(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTraining operation middleware
func (siw *ServerInterfaceWrapper) UpdateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sessions", wrapper.GetAllSessions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sessions", wrapper.CreateSession)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sessions/{id}", wrapper.DeleteSession)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/sessions/{id}", wrapper.UpdateSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trainings", wrapper.CreateTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details", wrapper.GetTrainingsDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details/current-week", wrapper.GetTrainingsDetailsCurrentWeek)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/trainings/{id}", wrapper.DeleteTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/{id}", wrapper.GetTrainingById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/trainings/{id}", wrapper.UpdateTraining)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
