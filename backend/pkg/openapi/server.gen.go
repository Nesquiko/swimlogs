// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi
//lint:file-ignore ST1005 generated code

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sessions)
	GetSessions(w http.ResponseWriter, r *http.Request, params GetSessionsParams)

	// (POST /sessions)
	CreateSession(w http.ResponseWriter, r *http.Request)

	// (DELETE /sessions/{id})
	DeleteSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /sessions/{id})
	UpdateSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /trainings)
	CreateTraining(w http.ResponseWriter, r *http.Request)

	// (GET /trainings/details)
	GetTrainingsDetails(w http.ResponseWriter, r *http.Request, params GetTrainingsDetailsParams)

	// (GET /trainings/details/current-week)
	GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request)

	// (DELETE /trainings/{id})
	DeleteTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /trainings/{id})
	GetTrainingById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /trainings/{id})
	UpdateTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSessions operation middleware
func (siw *ServerInterfaceWrapper) GetSessions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSessionsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSessions(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTraining operation middleware
func (siw *ServerInterfaceWrapper) CreateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTraining(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetails operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrainingsDetailsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetailsCurrentWeek operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetailsCurrentWeek(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTraining operation middleware
func (siw *ServerInterfaceWrapper) DeleteTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingById operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingById(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTraining operation middleware
func (siw *ServerInterfaceWrapper) UpdateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sessions", wrapper.GetSessions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sessions", wrapper.CreateSession)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sessions/{id}", wrapper.DeleteSession)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/sessions/{id}", wrapper.UpdateSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trainings", wrapper.CreateTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details", wrapper.GetTrainingsDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details/current-week", wrapper.GetTrainingsDetailsCurrentWeek)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/trainings/{id}", wrapper.DeleteTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/{id}", wrapper.GetTrainingById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/trainings/{id}", wrapper.UpdateTraining)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
