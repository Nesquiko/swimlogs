// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi
//lint:file-ignore ST1005 generated code

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sessions)
	GetSessions(w http.ResponseWriter, r *http.Request, params GetSessionsParams)

	// (POST /sessions)
	CreateSession(w http.ResponseWriter, r *http.Request)

	// (DELETE /sessions/{id})
	DeleteSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /sessions/{id})
	UpdateSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /trainings)
	CreateTraining(w http.ResponseWriter, r *http.Request)

	// (GET /trainings/details)
	GetTrainingsDetails(w http.ResponseWriter, r *http.Request, params GetTrainingsDetailsParams)

	// (GET /trainings/details/current-week)
	GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request)

	// (DELETE /trainings/{id})
	DeleteTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /trainings/{id})
	GetTrainingById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /trainings/{id})
	UpdateTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSessions operation middleware
func (siw *ServerInterfaceWrapper) GetSessions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSessionsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSessions(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTraining operation middleware
func (siw *ServerInterfaceWrapper) CreateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTraining(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetails operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrainingsDetailsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetailsCurrentWeek operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetailsCurrentWeek(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTraining operation middleware
func (siw *ServerInterfaceWrapper) DeleteTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingById operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingById(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTraining operation middleware
func (siw *ServerInterfaceWrapper) UpdateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sessions", wrapper.GetSessions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sessions", wrapper.CreateSession)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sessions/{id}", wrapper.DeleteSession)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/sessions/{id}", wrapper.UpdateSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trainings", wrapper.CreateTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details", wrapper.GetTrainingsDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details/current-week", wrapper.GetTrainingsDetailsCurrentWeek)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/trainings/{id}", wrapper.DeleteTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/{id}", wrapper.GetTrainingById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/trainings/{id}", wrapper.UpdateTraining)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xb/2/buBX/VwjuAG+AHDtJe9gZGIa75noL0PaCOoduCzyAll5sXiRSR1JxvM7/+8Av",
	"kiiJspXmy3JYf6orUY/v+/s88uUzjnmWcwZMSTz7jAX8VoBUP/CEgnnwRgBRcCkIZZStPtrX+kXMmQJm",
	"fpI8T2lMFOVs8qvkTD+T8Royon99I+Aaz/AfJvVOE/tWTj7ApiSNd7tdhBOQsaC5JoVn2G2HrrlAsWaE",
	"shUiSJWfRIZfKiDBMyUK2EX4lzx5IL+54DkI5eRfpjy+Mb+ogkx2FzCSgf4X7kiWp4Bn+BMRGSpyHOGM",
	"3L0DtlJrPDt5/TrCapvrBVIJI3CEWZHpb5tSfyiyJQjEr5FaAzIMRIiyRLMMEnGGNmsar1GekhiQWlNp",
	"FyHKKtUgKpEs8pxLSJDiaAlHuNqfMgUrEJoBATkQ1eXhb3yDMsK2SNEMpKZgV3rbafkoo5kW4ThEW4La",
	"p7iESkVY3FTeq+k0RGqAniSojpaIckqizKnIrXxa9UhQh5WjiNDu/LFIoasbCTFniexu/ItmeLlFokhB",
	"Oj9wMaADg2aAciJIBgoEjmq9fhtUq32yP0TnHqOXev1u54fdFdas4EVFni9/hVhp6lr/XQnO6v9p0xkj",
	"KY7khmY+w/itAJBqmwLuxM0usJl7QIQg2yErIqzzRJe9n53f6Lco4dq4a6jDisdxIbSvXHORafEsmUBo",
	"J4UwGeY9ZWH/STlb1TtIkFKrJCXS+DHKKCsUyMNGNJ50SbOAMJ/WwAJCmC9QUmhWzZuEbLVMOVEKhP7w",
	"X3+8mo6PF3+9mo6/W/zn5Go6Pl38aXY1Hb9emEffDDHK/nxe6ER9KJ8bV5M5Z9LGxY8JVW84u05prD66",
	"F12xL9eABEheiBjQhkgECVWQaGWds1uS0mRutf2jEFz4dA4UicoSekdFaCrxDDtaaEPVGp0naPT3f/xz",
	"pLdlIy1pwRJjQwVML7MxTbY6ltkN4xumtY90FUGjjLNkO8It58Fn7n8oJprmEtAUN+yOTZDa8M8KaZZc",
	"C56h6XQ2nerwOjmdvf4uQstCGYWMXp3OTk9GJiyoMvFWieEzrt1rUCE3mjwzOgkZ3qm99HLPEmWlvq8p",
	"hrHV2mQfa5UT7qJSFx+4eqvV8Hxu8izGaHCSERWvdRieJ53d3EL5RWZpFrScrCgjloH9zF/UKw2GkFXU",
	"VDhib7mqPaxTEvyqVRGOfN4Wg5KY1QbSqnAZ1ZGABKVUKl3XKvq7CJfuZ00i3xRCAFOfAG4eQbOVhw1U",
	"UJOZg3oqyQ/RzDsne1Vo3Me6nMVWaLQBuImQ5EJZIGPqLGGJK0o6heEIr4EkIGwDQuI1jN9wpgRPu7m+",
	"8RrZ70rPvhuTFfzl9NvptIEsWi9qxbYr2s6z3aPlAl2fSv3054IjLxnUy58iGzSZkTnE9JpCgmg7H1Qb",
	"GrOc6RL2GYNB5lf4PWe6qEX4sgBpf32ChJW/L9eFcD/fCmp/zIkqhPtZmK8XARjlc9/j+12n+B6ti4yw",
	"sQCSkGUKCO7ylNgYL/sF0IRDwK1VqhuE31JIEwe7XfhLpPsAkiRUryEposxiQ72XBjrVZkhpYGkQpA6u",
	"CN+NV3zs9s9IfmV5WBC29Qpzm4X5mgvVlk8WWUbE9oBsrdC2G0SlFkMQvl0/uxZootw6yMKYpaNsWuIx",
	"NTyDtZiaQxDel91nzVLl6QYircktIKJQCkRnLQaubRvQawQY6O1u3+tOrMXImXtXYbWVOWQxDsLCeqob",
	"0ZrMR9tyDiciQf0sEhANMld4Dgpx/by2VQpS1oTOCpvXbOtsl06D0WqS+LxuXj3lb3NAowtSSBh5BnCN",
	"blj3JcZ1XWpNrETOtmboBhSNzpkCcZuOgmSK5bxH9mLpCXVY/sbyHh2YzR7XnUNe6J+dHYrLJ+w+7yOq",
	"x3Jf1GqLHujKNVowrU5Pe97uzscOVHQspbgi6Zl3DNXKtEWmEypJU1RGs6xOksyvzAa3p6ST49ABVht7",
	"GiGbXV6bG6fZxX7Dh1OPL8UTHL9E+5JbzwHeEx6keYHd7ux6DwMrhym3QVTi3sOV+aHTOLPq4cdxjWx3",
	"vzO5To4brIqcGFyudXBQGffMbIfD/UAEXurXVfAZw9VuUSnzzwNCzvmfr+P27qFQu2i0rU3m6nc6D5CE",
	"KILIkhfK6wbLwyvdZbb7Ydh3oq3fIwGqEAwSX9ig4+jVc/pv2BNfxmCICGfzFfhEj8Onw1o9fUaJecFU",
	"mR6tN/gETw9axFK3vGNPhJAZyqa+m+psF7LPCc/cae9zFUSaaPpVASoKmvQjmwGntiUnoUPbB57ZNjuQ",
	"ecVR21RGArtdzXZTpUGrtbOU1y9+4EyTsKDN+IGBhkFA9QJQzlCj3ic7fkVCzrMeCIdaB1ov30lekGFD",
	"BdbbK2zYk8c07D6L/m7Q7UDLfwXB/4cg+KUgYOOSXwSDd+ac7poHclYOjOS0PDWO60PP+YZm7/hKou8v",
	"zo9whFMagzswtwMz+P35JXrnnka4ECme4bVSuZxNJjwHZq9vj7hYTdzHcvL+/LJxZeltgiN8C8KiRHx8",
	"ND2a6pXcMohn+PRoenRq8dLa2GziXy2tIBCWHw38NlXPuy3SucjIeZ7gGf4J1Ny/SXJuLvHsqgvrzNCO",
	"BvYmwjXxqIwaosxJk7nu/a0AobGWU5QDyM2bcf/w3+8NqjQRdIjexFNe1FSM7eHFoPRB/BxP9+et3aJ1",
	"vX8ynfaFU7Vu0rmVNKdjZCXtWabtFBa6K+IyYFU70CYRg011Hd22ql0zr97WU3Hbh9zUvbxm5ffUhdy3",
	"ARk4Tuj5wRE6T+pxMiswlYiuGBeQRAaV6eWcgX6+AqadBsxlXWcQseXYx48201DdcHcF/N6Xxgx6yCKO",
	"QcrrIk23VmZIjBzV2cIuwq9s2D1kqqG6DHMXOuiWpIXzwJc++RIYTnmqoZdX0+8eqmmSCiDJFsEdlUp6",
	"18T+Lc3jChKgHEy5u6iuqpPPNNlZCVIIDdqdmecSkdpfG/MoBq8007L9xE/LjRB7FWhcHWnLhHP2V4Nr",
	"TPjSv7fe7Kv+NrMQr+QYB9dwpC6vDqP1FdYDDYYup3kRKHl2Jlr2ljv7/mu5+5+Xuy8coGQ2GZjRzjJL",
	"xDEXieGaI6l7G0u06iCcjYeUrulzlC4Ltq32jWSQoLmfOAcgw33DnY8T+VUG308kOKbanzPLRtzeDBxE",
	"rd64bAi2Xjanab1ADjPt/cHHJPzXHk+JZtrjaF3P+OCJvB/T2GLpLmF8TSHj8B3AM8ibwgOqvjErhbes",
	"OfFG8/Y0mDIwPVj2Y1aUimJkBw/sectGZyy1hi3agIBSEaEOtWRQugHEr53qY3WqL2RmM/rC+dqeWc97",
	"j8RedBy4PQL6gDbD0ofgcE5kMf34eOQPTPYufzREbHbgApVeZtpEmy/ulRombix2vAG4OZgnSuWSNK1z",
	"Qnu4dkgC8CaQ8ZccwQwYaB6kheE9gmpMqR5uEhpFsCte3wgskfduFfYPCPeoIQob+idQ95LVM+0P2/ME",
	"PyF02/9nmm4i3jBMGn9K8ZQ6HNRweWjp+TuuXlM2AXrzgs8D6uDj9FDT9hCwF/5T2d0zOFF/Yi1TnYNy",
	"7jCubAiajvVgDPc43vlYPYGfJc2VnrgNe/aF4AlakvgGWILsss4NymazOZIbmqV8JY9ink1ITrF2V7db",
	"dQ1T91jVozrUF7v/BgAA//9LADXBID4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
