// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi
//lint:file-ignore ST1005 generated code

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sessions)
	GetAllSessions(w http.ResponseWriter, r *http.Request)

	// (POST /sessions)
	CreateSession(w http.ResponseWriter, r *http.Request)

	// (DELETE /sessions/{id})
	DeleteSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /sessions/{id})
	UpdateSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /trainings)
	CreateTraining(w http.ResponseWriter, r *http.Request)

	// (GET /trainings/details)
	GetTrainingsDetails(w http.ResponseWriter, r *http.Request, params GetTrainingsDetailsParams)

	// (GET /trainings/details/current-week)
	GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request)

	// (DELETE /trainings/{id})
	DeleteTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /trainings/{id})
	GetTrainingById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /trainings/{id})
	UpdateTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllSessions operation middleware
func (siw *ServerInterfaceWrapper) GetAllSessions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllSessions(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTraining operation middleware
func (siw *ServerInterfaceWrapper) CreateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTraining(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetails operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrainingsDetailsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetailsCurrentWeek operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetailsCurrentWeek(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTraining operation middleware
func (siw *ServerInterfaceWrapper) DeleteTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingById operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingById(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTraining operation middleware
func (siw *ServerInterfaceWrapper) UpdateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sessions", wrapper.GetAllSessions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sessions", wrapper.CreateSession)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sessions/{id}", wrapper.DeleteSession)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/sessions/{id}", wrapper.UpdateSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trainings", wrapper.CreateTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details", wrapper.GetTrainingsDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details/current-week", wrapper.GetTrainingsDetailsCurrentWeek)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/trainings/{id}", wrapper.DeleteTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/{id}", wrapper.GetTrainingById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/trainings/{id}", wrapper.UpdateTraining)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
