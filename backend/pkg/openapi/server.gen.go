// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi
//lint:file-ignore ST1005 generated code

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sessions)
	GetAllSessions(w http.ResponseWriter, r *http.Request)

	// (POST /sessions)
	CreateSession(w http.ResponseWriter, r *http.Request)

	// (DELETE /sessions/{id})
	DeleteSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /sessions/{id})
	UpdateSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /trainings)
	CreateTraining(w http.ResponseWriter, r *http.Request)

	// (GET /trainings/details)
	GetTrainingsDetails(w http.ResponseWriter, r *http.Request, params GetTrainingsDetailsParams)

	// (GET /trainings/details/current-week)
	GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request)

	// (DELETE /trainings/{id})
	DeleteTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /trainings/{id})
	GetTrainingById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /trainings/{id})
	UpdateTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllSessions operation middleware
func (siw *ServerInterfaceWrapper) GetAllSessions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllSessions(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTraining operation middleware
func (siw *ServerInterfaceWrapper) CreateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTraining(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetails operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrainingsDetailsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetailsCurrentWeek operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetailsCurrentWeek(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTraining operation middleware
func (siw *ServerInterfaceWrapper) DeleteTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingById operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingById(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTraining operation middleware
func (siw *ServerInterfaceWrapper) UpdateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sessions", wrapper.GetAllSessions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sessions", wrapper.CreateSession)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sessions/{id}", wrapper.DeleteSession)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/sessions/{id}", wrapper.UpdateSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trainings", wrapper.CreateTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details", wrapper.GetTrainingsDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details/current-week", wrapper.GetTrainingsDetailsCurrentWeek)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/trainings/{id}", wrapper.DeleteTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/{id}", wrapper.GetTrainingById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/trainings/{id}", wrapper.UpdateTraining)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"n1ZfKzQ1Vv1V4+qz9X8DAAD//zOtQ4kkQgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
