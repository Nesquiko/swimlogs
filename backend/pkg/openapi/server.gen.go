// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi
//lint:file-ignore ST1005 generated code

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sessions)
	GetSessions(w http.ResponseWriter, r *http.Request, params GetSessionsParams)

	// (POST /sessions)
	CreateSession(w http.ResponseWriter, r *http.Request)

	// (DELETE /sessions/{id})
	DeleteSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /sessions/{id})
	UpdateSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /trainings)
	CreateTraining(w http.ResponseWriter, r *http.Request)

	// (GET /trainings/details)
	GetTrainingsDetails(w http.ResponseWriter, r *http.Request, params GetTrainingsDetailsParams)

	// (GET /trainings/details/current-week)
	GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request)

	// (DELETE /trainings/{id})
	DeleteTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /trainings/{id})
	GetTrainingById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /trainings/{id})
	UpdateTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSessions operation middleware
func (siw *ServerInterfaceWrapper) GetSessions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSessionsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSessions(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTraining operation middleware
func (siw *ServerInterfaceWrapper) CreateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTraining(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetails operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrainingsDetailsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetailsCurrentWeek operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetailsCurrentWeek(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTraining operation middleware
func (siw *ServerInterfaceWrapper) DeleteTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingById operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingById(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTraining operation middleware
func (siw *ServerInterfaceWrapper) UpdateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sessions", wrapper.GetSessions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sessions", wrapper.CreateSession)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sessions/{id}", wrapper.DeleteSession)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/sessions/{id}", wrapper.UpdateSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trainings", wrapper.CreateTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details", wrapper.GetTrainingsDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details/current-week", wrapper.GetTrainingsDetailsCurrentWeek)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/trainings/{id}", wrapper.DeleteTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/{id}", wrapper.GetTrainingById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/trainings/{id}", wrapper.UpdateTraining)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
