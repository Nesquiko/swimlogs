// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi
//lint:file-ignore ST1005 generated code

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /sessions)
	GetSessions(w http.ResponseWriter, r *http.Request, params GetSessionsParams)

	// (POST /sessions)
	CreateSession(w http.ResponseWriter, r *http.Request)

	// (DELETE /sessions/{id})
	DeleteSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /sessions/{id})
	UpdateSession(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (POST /trainings)
	CreateTraining(w http.ResponseWriter, r *http.Request)

	// (GET /trainings/details)
	GetTrainingsDetails(w http.ResponseWriter, r *http.Request, params GetTrainingsDetailsParams)

	// (GET /trainings/details/current-week)
	GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request)

	// (DELETE /trainings/{id})
	DeleteTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (GET /trainings/{id})
	GetTrainingById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /trainings/{id})
	UpdateTraining(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSessions operation middleware
func (siw *ServerInterfaceWrapper) GetSessions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSessionsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSessions(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSession(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSession operation middleware
func (siw *ServerInterfaceWrapper) DeleteSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateSession operation middleware
func (siw *ServerInterfaceWrapper) UpdateSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSession(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTraining operation middleware
func (siw *ServerInterfaceWrapper) CreateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTraining(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetails operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetails(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrainingsDetailsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pageSize"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetails(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingsDetailsCurrentWeek operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingsDetailsCurrentWeek(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingsDetailsCurrentWeek(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTraining operation middleware
func (siw *ServerInterfaceWrapper) DeleteTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTrainingById operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrainingById(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTraining operation middleware
func (siw *ServerInterfaceWrapper) UpdateTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTraining(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sessions", wrapper.GetSessions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sessions", wrapper.CreateSession)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/sessions/{id}", wrapper.DeleteSession)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/sessions/{id}", wrapper.UpdateSession)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/trainings", wrapper.CreateTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details", wrapper.GetTrainingsDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/details/current-week", wrapper.GetTrainingsDetailsCurrentWeek)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/trainings/{id}", wrapper.DeleteTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trainings/{id}", wrapper.GetTrainingById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/trainings/{id}", wrapper.UpdateTraining)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1zB1j1U9qkN9sftvAAAA///vSbOeBD4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
