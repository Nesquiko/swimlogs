openapi: 3.0.3
info:
  version: '1.1.0'
  title: SwimLogs API
  license:
    name: MIT License
    url: 'https://opensource.org/licenses/MIT'
  description: Openapi specification for SwimLogs API.

servers:
  - url: https://www.swimlogs.com/api
    description: Prod backend server

tags:
  - name: Session
  - name: Training

paths:
  /sessions:
    get:
      description: Return all sessions
      tags:
        - Session
      operationId: getSessions
      parameters:
        - name: page
          in: query
          required: true
          description: Which page to return, starts at 0
          schema:
            type: integer
            example: 0
            minimum: 0
        - name: pageSize
          in: query
          required: true
          description: How many details to return
          schema:
            type: integer
            example: 10
            minimum: 1
      responses:
        200:
          $ref: '#/components/responses/SessionsResponse'
    post:
      description: Creates new session
      tags:
        - Session
      operationId: createSession
      requestBody:
        description: Request for creating new session. Id of the session
          is ignored, and new one is generated.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                day:
                  $ref: '#/components/schemas/Day'
                  description: On which day does the session occur
                startTime:
                  type: string
                  pattern: ^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$
                  description: When does the session start during the day
                durationMin:
                  type: integer
                  description: How long does the session last, in minutes
                  example: 60
              required:
                - day
                - startTime
                - durationMin
      responses:
        201:
          description: A new session was successfully created and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        400:
          $ref: '#/components/responses/InvalidSessionErrorResponse'
        409:
          description: Duplicate session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
              example:
                title: Duplicate session
                details: Session already exists

  /sessions/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Id of a session
        schema:
          type: string
          format: uuid
    delete:
      description: Deletes a session with matching id
      tags:
        - Session
      operationId: deleteSession
      responses:
        204:
          description: Session deleted
        404:
          $ref: '#/components/responses/SessionNotFoundErrorResponse'
    put:
      description: Updates session
      tags:
        - Session
      operationId: updateSession
      requestBody:
        description: Request for updating an existing session according to sent
          object in this request.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                day:
                  $ref: '#/components/schemas/Day'
                  description: On which day does the session occur
                startTime:
                  type: string
                  pattern: ^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$
                  description: When does the session start during the day
                  x-go-type: StartTime
                durationMin:
                  type: integer
                  description: How long does the session last, in minutes
                  example: 60
      responses:
        200:
          description: Returns the updated Session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'

        400:
          $ref: '#/components/responses/InvalidSessionErrorResponse'
        404:
          $ref: '#/components/responses/SessionNotFoundErrorResponse'
        409:
          $ref: '#/components/responses/EditConflictResponse'

  /trainings:
    post:
      description: Creates new training
      tags:
        - Training
      operationId: createTraining
      requestBody:
        $ref: '#/components/requestBodies/CreateTrainingRequest'
      responses:
        201:
          description: New training was successfully created and detail about
            new training is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingDetail'
        400:
          $ref: '#/components/responses/InvalidTrainingErrorResponse'
  /trainings/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Id of a training
        schema:
          type: string
          format: uuid
    get:
      description: Get a training with matching id
      tags:
        - Training
      operationId: getTrainingById
      responses:
        200:
          description: Response with a training
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
        404:
          $ref: '#/components/responses/TrainingNotFoundErrorResponse'
    put:
      description: Updates training with matching id according to the training
        object in the request.
      tags:
        - Training
      operationId: updateTraining
      requestBody:
        $ref: '#/components/requestBodies/UpdateTrainingRequest'
      responses:
        200:
          description: Returns detail of the updated training
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingDetail'
        400:
          $ref: '#/components/responses/InvalidTrainingErrorResponse'
        404:
          $ref: '#/components/responses/TrainingNotFoundErrorResponse'
        409:
          $ref: '#/components/responses/EditConflictResponse'
    delete:
      description: Deletes a training with matching id
      tags:
        - Training
      operationId: deleteTraining
      responses:
        200:
          description: Training was deleted
        404:
          $ref: '#/components/responses/TrainingNotFoundErrorResponse'

  /trainings/details:
    get:
      description: Returns paginated list of details about trainings,
        ordered by when they were created
      tags:
        - Training
      operationId: getTrainingsDetails
      parameters:
        - name: page
          in: query
          required: true
          description: Which page to return, starts at 0
          schema:
            type: integer
            example: 0
            minimum: 0
        - name: pageSize
          in: query
          required: true
          description: How many details to return
          schema:
            type: integer
            example: 10
            minimum: 1
      responses:
        200:
          $ref: '#/components/responses/TrainingDetailsResponse'
        400:
          description: Page or pageSize is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetail'
              example:
                title: Page can't be less than 0
                detail: Page can't be less than 0, was '-1'.

  /trainings/details/current-week:
    get:
      description: Returns list of all trainings in current week
      tags:
        - Training
      operationId: getTrainingsDetailsCurrentWeek
      responses:
        200:
          $ref: '#/components/responses/TrainingDetailsCurrentWeekResponse'

components:
  requestBodies:
    CreateTrainingRequest:
      description: Request for creating a training 
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewTraining'

    UpdateTrainingRequest:
      description: Request for updating a training 
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              date:
                type: string
                format: date
                description: On what date does the training occur.
              startTime:
                type: string
                pattern: ^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$
                description: When does the training start during the day.
              durationMin:
                type: integer
                description: How long does the session last, in minutes
                example: 60
              blocks:
                type: array
                items:
                  type: object
                  properties:
                    num:
                      type: integer
                      description: Number of the block, indicates on which place this block in training is supposed to be.
                    repeat:
                      type: integer
                      description: How many times to repeat this block
                      minimum: 1
                    name:
                      type: string
                      example: Warm up
                      maxLength: 255
                    sets:
                      type: array
                      items:
                        type: object
                        properties:
                          num:
                            type: integer
                            description: Number of the set, indicates on what place
                              in block the set is supposed to be.
                          repeat:
                            type: integer
                            description: How many times to repeat this set
                            minimum: 1
                          distance:
                            type: integer
                            example: 400
                          what:
                            type: string
                            description: Description of what to swim
                            example: Freestyle
                          startingRule:
                            type: object
                            properties:
                              type:
                                $ref: '#/components/schemas/StartType'
                              seconds:
                                type: integer
                                description: Used by rules which require a time parameter
                                example: 60
                            required:
                              - rule

  responses:
    SessionsResponse:
      description: Response containing paginated list of sessions
      content:
        application/json:
          schema:
            type: object
            properties:
              sessions:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
              pagination:
                $ref: '#/components/schemas/Pagination'
            required:
              - sessions
              - pagination
    
    TrainingDetailsResponse:
      description: Paginated list of training details
      content:
        application/json:
          schema:
            type: object
            properties:
              details:
                type: array
                items:
                  $ref: '#/components/schemas/TrainingDetail'
              pagination:
                $ref: '#/components/schemas/Pagination'
            required:
              - details
              - pagination

    TrainingDetailsCurrentWeekResponse:
      description: List of training details in current week,
        sorted by date and start time
      headers:
        Cache-Control:
          description: Cache-Control header with max-age=3600
          schema:
            type: string
          example: max-age=3600
      content:
        application/json:
          schema:
            type: object
            required:
              - details
            properties:
              details:
                type: array
                items:
                  $ref: '#/components/schemas/TrainingDetail'

    TrainingNotFoundErrorResponse:
      description: Training with specified id wasn't found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'
          example:
            title: Training wasn't found
            detail: Training with Id 'XYZ' wasn't found.

    InvalidTrainingErrorResponse:
      description: Invalid training
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidTraining'

    EditConflictResponse:
      description: The resource was edited

    SessionNotFoundErrorResponse:
      description: Session with matching Id wasn't found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDetail'
          example:
            title: Session wasn't found
            details: Session with Id 'XYZ' wasn't found

    InvalidSessionErrorResponse:
      description: Invalid session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidSession'

  schemas:
    Day:
      type: string
      enum:
        - Monday
        - Tuesday
        - Wednesday
        - Thursday
        - Friday
        - Saturday
        - Sunday
    
    StartType:
      type: string
      enum:
        - None
        - Interval
        - Pause
    
    Equipment:
      type: string
      enum:
        - Fins
        - Monofin
        - Snorkel
        - Board
        - Paddles 

    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
        day:
          $ref: '#/components/schemas/Day'
          description: On which day does the session occur
        startTime:
          type: string
          pattern: ^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$
          description: When does the session start during the day
        durationMin:
          type: integer
          description: How long does the session last, in minutes
          example: 60
      required:
        - id
        - day
        - startTime
        - durationMin

    InvalidSession:
      type: object
      properties:
        day:
          type: string
          example: Unknown day name 'mondy'
        startTime:
          type: string
          example: Start time must be from 00:00 to 23:59, but was '43:32'
        durationMin:
          type: string
          example: Duration can't be 0

    TrainingSet:
      type: object
      properties:
        id:
          type: string
          format: uuid
        setOrder:
          type: integer
          description: Indicates on what place in training this set is
        subSetOrder:
          type: integer
          description: Indicates on what place in parent set this set is
        repeat:
          type: integer
          description: How many times to repeat this set
          minimum: 1
        distanceMeters:
          type: integer
          example: 400
        description:
          type: string
          description: Description of what to swim
          example: Freestyle
        startType:
          $ref: '#/components/schemas/StartType'
        startSeconds:
          type: integer
          description: Used by starts which require a time parameter
          example: 60
        totalDistance:
          type: integer
          description: Total distance in this set
          example: 800
        subSets:
          type: array
          items:
            $ref: '#/components/schemas/TrainingSet'
        equipment:
          type: array
          items:
            $ref: '#/components/schemas/Equipment'
      required:
        - id
        - repeat
        - startType
        - totalDistance

    Training:
      type: object
      properties:
        id:
          type: string
          format: uuid
        start:
          type: string
          format: date-time
          description: On what date and time does the training occur
        durationMin:
          type: integer
          description: How long does the session last, in minutes
          example: 60
        totalDistance:
          type: integer
          description: Sum of all distances in blocks in meters
          example: 2100
        sets:
          type: array
          items:
            $ref: '#/components/schemas/TrainingSet'
      required:
        - id
        - start
        - durationMin
        - totalDistance
        - sets

    TrainingDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        start:
          type: string
          format: date-time
          description: On what date and time does the training occur
        durationMin:
          type: integer
          description: How long does the session last, in minutes
          example: 60
        totalDistance:
          type: integer
          description: Total distance in the training in meters
          example: 2200
      required:
        - id
        - start
        - durationMin
        - totalDistance

    Pagination:
      description: Pagination metadata about paginated response
      type: object
      properties:
        total:
          type: integer
          description: Total count of all items
          example: 13
        page:
          type: integer
          description: Number of page returned
          example: 0
        pageSize:
          type: integer
          description: How many items are in page
          example: 10
      required:
        - total
        - page
        - pageSize

    ErrorDetail:
      type: object
      properties:
        title:
          type: string
          description: Short human-readable summary of the error
        detail:
          type: string
          description: A human-readable explanation of the error
        extensions:
          description: Field which contains any additional information for the
            error that occurred
          x-go-type: map[string]any
      required:
        - title
        - detail

    NewTraining:
      type: object
      properties:
        start:
          type: string
          format: date-time
          description: On what date and time does the training occur
        durationMin:
          type: integer
          description: How long does the session last, in minutes
          example: 60
        totalDistance:
          type: integer
          description: Sum of all distances in blocks in meters
          example: 2100
        sets:
          type: array
          items:
            $ref: '#/components/schemas/NewTrainingSet'
      required:
        - start
        - durationMin
        - totalDistance
        - sets

    InvalidTraining:
      type: object
      properties:
        durationMin:
          type: string
          example: Duration can't be 0
        sets:
          type: string
          example: Training must have at least one set
        invalidSets:
          type: array
          items:
            $ref: '#/components/schemas/InvalidTrainingSet'

    NewTrainingSet:
      type: object
      properties:
        setOrder:
          type: integer
          description: Indicates on what place in training this set is
        subSetOrder:
          type: integer
          description: Indicates on what place in parent set this set is
        repeat:
          type: integer
          description: How many times to repeat this set
          minimum: 1
        distanceMeters:
          type: integer
          example: 400
        description:
          type: string
          description: Description of what to swim
          example: Freestyle
        startType:
          $ref: '#/components/schemas/StartType'
        startSeconds:
          type: integer
          description: Used by starts which require a time parameter
          example: 60
        totalDistance:
          type: integer
          description: Total distance in this set
          example: 800
        subSets:
          type: array
          items:
            $ref: '#/components/schemas/NewTrainingSet'
        equipment:
          type: array
          items:
            $ref: '#/components/schemas/Equipment'
      required:
        - repeat
        - startType
        - totalDistance

    InvalidTrainingSet:
      type: object
      properties:
        setOrder:
          type: string
          example:
            - "Set order can't be less than 0"
            - "Duplicate set order 0"
        subSetOrder:
          type: string
          example:
            - "Sub set order can't be less than 0"
            - "Duplicate sub set order 0"
        repeat:
          type: string
          example: "Repeat must be greater than 0"
        distanceMeters:
          type: string
          example: "Distance must be greater than 0" 
        startType:
          type: string
          example: "Unknown start rule 'Intervl'"
        startSeconds:
          type: string
          example: "Type 'Pause' must have seconds set" 
        subSets:
          type: array
          items:
            $ref: '#/components/schemas/InvalidTrainingSet'
        equipment:
          type: array
          items:
            type: string
            example: "Unknown equipment 'Fin'"
